name: Publish tagged builds

on:
  push:
    tags: [ "*" ]

jobs:
  build-wheels:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-14, macos-13, windows-latest]
        python-version: ["3.10", "3.11", "3.12", "3.13", "3.13t"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build twine poetry_core==2.1.3
      - name: Check version is coherent
        run: |
          python .github/workflows/version_check.py pyproject.toml ${{ github.ref_name }}
      - name: Build
        run: |
          git clean -ffdx
          python -Im build -w
      - name: Publish
        run: |
          twine upload -p "${{ secrets.PYPI_PASSWORD }}" dist/*

  build-wheels-linux:
    defaults: { run: { working-directory: deqr-publish } }
    runs-on: ${{ matrix.os }}
    container:
      image: ghcr.io/torque/deqr/linux-build:2_28_${{ matrix.arch }}
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            arch: x86_64
          - os: ubuntu-24.04-arm
            arch: aarch64

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: deqr-publish
      - name: Check version is coherent
        run: |
          "${POETRY_PY}" .github/workflows/version_check.py pyproject.toml ${{ github.ref_name }}
      - name: Build
        run: |
          git clean -ffdx

          echo "::group::Build for Python 3.10"
          "${PY310}" -Im build -w
          echo "::endgroup::"

          echo "::group::Clean Python 3.10 artifacts"
          git clean -ffdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.11"
          "${PY311}" -Im build -w
          echo "::endgroup::"

          echo "::group::Clean Python 3.11 artifacts"
          git clean -ffdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.12"
          "${PY312}" -Im build -w
          echo "::endgroup::"

          echo "::group::Clean Python 3.12 artifacts"
          git clean -ffdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.13"
          "${PY313}" -Im build -w
          echo "::endgroup::"

          echo "::group::Clean Python 3.13 artifacts"
          git clean -ffdxe dist
          echo "::endgroup::"

          echo "::group::Build for Python 3.13t"
          "${PY313T}" -Im build -w
          echo "::endgroup::"

          echo "::group::Clean Python 3.13t artifacts"
          git clean -ffdxe dist
          echo "::endgroup::"
      - name: Publish
        run: |
          "${POETRY}" publish --username="${{ secrets.PYPI_USERNAME }}" --password="${{ secrets.PYPI_PASSWORD }}"
      - name: Cleanup
        if: ${{ always() }}
        run: git clean -ffdx

  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: "3.13"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip build twine poetry_core==2.1.3
      - name: Check version is coherent
        run: |
          python .github/workflows/version_check.py pyproject.toml ${{ github.ref_name }}
      - name: Build
        run: |
          git clean -ffdx
          python -Im build -s
      - name: Publish
        run: |
          twine upload -p "${{ secrets.PYPI_PASSWORD }}" dist/*
